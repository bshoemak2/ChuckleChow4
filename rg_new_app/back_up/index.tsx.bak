import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  Button,
  ActivityIndicator,
  Platform,
  Share,
  Linking,
  Image,
} from 'react-native';
import Animated, { Easing, FadeIn, FadeInUp } from 'react-native-reanimated';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Link } from 'expo-router';
import { FavoritesList } from './FavoritesList';
import { styles } from './_styles';
import * as Clipboard from 'expo-clipboard';

// Web fallbacks
const ScrollView = Platform.OS === 'web' ? ({ children, style, contentContainerStyle }) => (
  <div style={{ overflowY: 'auto', ...style }}>
    {React.Children.map(children, (child) => (
      <div style={contentContainerStyle}>{child}</div>
    ))}
  </div>
) : require('react-native').ScrollView;

const Picker = Platform.OS === 'web' ? ({ selectedValue, onValueChange, children, style }) => (
  <select
    value={selectedValue}
    onChange={(e) => onValueChange(e.target.value)}
    style={{ padding: 8, borderRadius: 4, ...style }}
  >
    {children}
  </select>
) : require('react-native').Picker;

const TouchableOpacity = Platform.OS === 'web' ? ({ children, onPress, style }) => (
  <button onClick={onPress} style={{ border: 'none', background: 'none', cursor: 'pointer', ...style }}>
    {children}
  </button>
) : require('react-native').TouchableOpacity;

const WebModal = Platform.OS === 'web' ? ({ visible, children }) => (
  visible ? (
    <div style={{
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      background: 'rgba(0,0,0,0.5)',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center'
    }}>
      {children}
    </div>
  ) : null
) : require('react-native').Modal;

const AnimatedView = Platform.OS === 'web' ? View : Animated.View;

// Error Boundary
class ErrorBoundary extends React.Component {
  state = { hasError: false, error: null };

  static getDerivedStateFromError(error) {
    console.error('ERROR_BOUNDARY_2025_04_21', error);
    return { hasError: true, error };
  }

  render() {
    if (this.state.hasError) {
      return (
        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#fff' }}>
          <Text style={{ fontSize: 24, color: '#f00' }}>
            Chaos broke loose! üê∑ {this.state.error?.message}
          </Text>
        </View>
      );
    }
    return this.props.children;
  }
}

console.log('INDEX_TSX_TOP_2025_04_21', new Date().toISOString());

export default function HomeScreen() {
  console.log('INDEX_TSX_HOMESCREEN_2025_04_21', new Date().toISOString());

  const [meat, setMeat] = useState('');
  const [vegetable, setVegetable] = useState('');
  const [fruit, setFruit] = useState('');
  const [seafood, setSeafood] = useState('');
  const [dairy, setDairy] = useState('');
  const [carb, setCarb] = useState('');
  const [devilWater, setDevilWater] = useState('');
  const [style, setStyle] = useState('');
  const [category, setCategory] = useState('');
  const [recipe, setRecipe] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [favorites, setFavorites] = useState([]);
  const [lastRandom, setLastRandom] = useState(false);
  const [showFavorites, setShowFavorites] = useState(false);
  const [selectedFavorite, setSelectedFavorite] = useState(null);
  const [search, setSearch] = useState('');
  const [copied, setCopied] = useState(false);
  const [error, setError] = useState(null);
  const [showCartModal, setShowCartModal] = useState(false);

  const API_URL = 'https://chuckle-and-chow.onrender.com';

  const INGREDIENT_CATEGORIES = {
    meat: [
      { name: 'ground beef', emoji: 'üçî' },
      { name: 'chicken', emoji: 'üçó' },
      { name: 'pork', emoji: 'ü•ì' },
      { name: 'lamb', emoji: 'üêë' },
      { name: 'pichana', emoji: 'ü•©' },
      { name: 'churrasco', emoji: 'üçñ' },
      { name: 'ribeye steaks', emoji: 'üçΩÔ∏è' },
      { name: 'squirrel', emoji: 'üêøÔ∏è' },
      { name: 'rabbit', emoji: 'üê∞' },
      { name: 'quail', emoji: 'üê¶' },
      { name: 'woodpecker', emoji: 'ü¶ú' },
    ],
    vegetables: [
      { name: 'carrot', emoji: 'ü•ï' },
      { name: 'broccoli', emoji: 'ü•¶' },
      { name: 'onion', emoji: 'üßÖ' },
      { name: 'potato', emoji: 'ü•î' },
      { name: 'tomato', emoji: 'üçÖ' },
      { name: 'green beans', emoji: 'üå±' },
      { name: 'okra', emoji: 'üåø' },
      { name: 'collards', emoji: 'ü•¨' },
    ],
    fruits: [
      { name: 'apple', emoji: 'üçé' },
      { name: 'banana', emoji: 'üçå' },
      { name: 'lemon', emoji: 'üçã' },
      { name: 'orange', emoji: 'üçä' },
      { name: 'mango', emoji: 'ü•≠' },
      { name: 'avocado', emoji: 'ü•ë' },
      { name: 'starfruit', emoji: '‚ú®' },
      { name: 'dragon fruit', emoji: 'üêâ' },
      { name: 'carambola', emoji: 'üåü' },
    ],
    seafood: [
      { name: 'salmon', emoji: 'üêü' },
      { name: 'shrimp', emoji: 'ü¶ê' },
      { name: 'cod', emoji: 'üê†' },
      { name: 'tuna', emoji: 'üê°' },
      { name: 'yellowtail snapper', emoji: 'üé£' },
      { name: 'grouper', emoji: 'ü™∏' },
      { name: 'red snapper', emoji: 'üåä' },
      { name: 'oysters', emoji: 'ü¶™' },
      { name: 'lobster', emoji: 'ü¶û' },
      { name: 'conch', emoji: 'üêö' },
      { name: 'lionfish', emoji: 'ü¶à' },
      { name: 'catfish', emoji: 'üê∫' },
      { name: 'bass', emoji: 'üé∏' },
      { name: 'crappie', emoji: 'üê≥' },
    ],
    dairy: [
      { name: 'cheese', emoji: 'üßÄ' },
      { name: 'milk', emoji: 'ü•õ' },
      { name: 'butter', emoji: 'üßà' },
      { name: 'yogurt', emoji: 'üç∂' },
      { name: 'eggs', emoji: 'ü•ö' },
    ],
    carbs: [
      { name: 'bread', emoji: 'üçû' },
      { name: 'pasta', emoji: 'üçù' },
      { name: 'rice', emoji: 'üçö' },
      { name: 'tortilla', emoji: 'üåÆ' },
    ],
    devilWater: [
      { name: 'beer', emoji: 'üç∫' },
      { name: 'moonshine', emoji: 'ü•É' },
      { name: 'whiskey', emoji: 'ü•É' },
      { name: 'vodka', emoji: 'üç∏' },
      { name: 'tequila', emoji: 'üåµ' },
    ],
  };

  const AFFILIATE_LINKS = [
    {
      title: 'üçî Bubba‚Äôs Burger Smasher üçî',
      url: 'https://amzn.to/4jwsA8w',
      image: 'https://m.media-amazon.com/images/I/61msHBPisBL._AC_SX425_.jpg',
    },
    {
      title: 'ü•É Hillbilly Moonshine Maker ü•É',
      url: 'https://amzn.to/4lwVxmw',
      image: 'https://m.media-amazon.com/images/I/418WMdO5DQS._AC_US100_.jpg',
    },
    {
      title: 'üî™ Granny‚Äôs Hog-Slicin‚Äô Knife üî™',
      url: 'https://amzn.to/4lp4j5M',
      image: 'https://m.media-amazon.com/images/I/61p28HGfcGL._AC_SY450_.jpg',
    },
    {
      title: 'üç∫ Redneck Beer Pong Kit üç∫',
      url: 'https://amzn.to/42re7n7',
      image: 'https://m.media-amazon.com/images/I/81ZrDViTBTL._AC_SY355_.jpg',
    },
    {
      title: 'üêî Cletus‚Äôs Chicken Tickler Whisk üêî',
      url: 'https://amzn.to/4j9uqMG',
      image: 'https://m.media-amazon.com/images/I/41ccOMyTYLL._AC_SX425_.jpg',
    },
    {
      title: 'ü•ö Possum‚Äôs Egg-Splodin‚Äô Separator ü•ö',
      url: 'https://amzn.to/3EiOrkG',
      image: 'https://m.media-amazon.com/images/I/61DHEfEI1TL._AC_SX425_.jpg',
    },
    {
      title: 'ü•ì Hog Holler Bacon Gripper Tongs ü•ì',
      url: 'https://amzn.to/4jhJ8kA',
      image: 'https://m.media-amazon.com/images/I/71jIBCjXMPL._AC_SX425_.jpg',
    },
    {
      title: 'üåΩ Moonshine Mason Jar Measuring Cups üåΩ',
      url: 'https://amzn.to/44tvYwi',
      image: 'https://m.media-amazon.com/images/I/51QJ8JIQCaL._AC_SY606_.jpg',
    },
    {
      title: 'üî• Gator‚Äôs Grill Scorchin‚Äô Mitt üî•',
      url: 'https://amzn.to/4lsnUCh',
      image: 'https://m.media-amazon.com/images/I/81Q8RGATIHL._AC_SX425_.jpg',
    },
    {
      title: 'üçî Squirrel‚Äôs Nutty Pancake Flipper üçî',
      url: 'https://amzn.to/3RJ4U4K',
      image: 'https://m.media-amazon.com/images/I/71AicV-umtL._AC_SX425_.jpg',
    },
    {
      title: 'üê∑ Caja China Pig Roasting Box üê∑',
      url: 'https://amzn.to/4cz2GP4',
      image: 'https://m.media-amazon.com/images/I/61eD3oq2XXL._AC_SX425_.jpg',
    },
    {
      title: 'üç≥ Hillbilly Cast Iron Skillet üç≥',
      url: 'https://amzn.to/42H0vp9',
      image: 'https://m.media-amazon.com/images/I/81lU5G0EU-L._AC_SX425_.jpg',
    },
  ];

  useEffect(() => {
    const loadFavorites = async () => {
      try {
        const saved = await AsyncStorage.getItem('favorites');
        if (saved) {
          const parsedFavorites = JSON.parse(saved);
          const cleanedFavorites = parsedFavorites.map(fav => ({
            ...fav,
            title: fav.title || fav.title_en,
            steps: fav.steps || fav.steps_en,
            title_es: undefined,
            steps_es: undefined,
          }));
          setFavorites(cleanedFavorites);
          await AsyncStorage.setItem('favorites', JSON.stringify(cleanedFavorites));
        }
      } catch (error) {
        console.error('Error loading favorites:', error);
      }
    };
    loadFavorites();
  }, []);

  const fetchRecipe = async (isRandom = false) => {
    const selectedIngredients = [meat, vegetable, fruit, seafood, dairy, carb, devilWater].filter(Boolean);
    if (!selectedIngredients.length && !isRandom) {
      setRecipe({ title: "Error ü§¶‚Äç‚ôÇÔ∏è", steps: ["Pick somethin‚Äô, ya lazy bum! üòõ"], nutrition: { calories: 0 } });
      setError(null);
      setIsLoading(false);
      setLastRandom(isRandom);
      return;
    }
    setIsLoading(true);
    setRecipe(null);
    setError(null);
    setLastRandom(isRandom);
    const url = `${API_URL}/generate_recipe`;
    const requestBody = JSON.stringify({
      ingredients: selectedIngredients,
      preferences: { style, category, isRandom },
    });
    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: requestBody,
      });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || `API failed: ${response.status}`);
      }
      const data = await response.json();
      console.log('Fetched recipe:', data);
      setRecipe(data);
    } catch (error) {
      console.error('Fetch error:', error);
      setError(error.message);
      setRecipe({ title: "Error ü§¶‚Äç‚ôÇÔ∏è", steps: [`Cookin‚Äô crashed: ${error.message} ü§°`], nutrition: { calories: 0 } });
    } finally {
      setIsLoading(false);
    }
  };

  const saveFavorite = async () => {
    if (recipe && !favorites.some((fav) => fav.title === recipe.title)) {
      const cleanedRecipe = {
        ...recipe,
        title: recipe.title,
        steps: recipe.steps,
        title_es: undefined,
        steps_es: undefined,
      };
      const newFavorites = [...favorites, cleanedRecipe];
      setFavorites(newFavorites);
      try {
        await AsyncStorage.setItem('favorites', JSON.stringify(newFavorites));
      } catch (error) {
        console.error('Error saving favorite:', error);
      }
    }
  };

  const shareRecipe = async (platform = 'default') => {
    const currentRecipe = selectedFavorite || recipe;
    if (!currentRecipe) return;
    const shareText = currentRecipe.shareText || `${currentRecipe.title}\n${currentRecipe.ingredients.join('\n')}\n${currentRecipe.steps.join('\n')}`;
    const url = 'https://chuckle-and-chow.onrender.com/';
    const fullMessage = `Get a load of this hogwash: ${shareText}\nCheck out my app: ${url} ü§†`;
    try {
      if (platform === 'default' || platform === 'more') {
        await Share.share({ message: fullMessage });
      } else if (platform === 'twitter') {
        const tweetUrl = `https://x.com/intent/post?text=${encodeURIComponent(fullMessage)}`;
        await Linking.openURL(tweetUrl);
      } else if (platform === 'facebook') {
        const fbUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(shareText)}`;
        await Linking.openURL(fbUrl);
      }
    } catch (error) {
      console.error('Share error:', error);
      setError('Failed to share');
    }
  };

  const copyToClipboard = async () => {
    const currentRecipe = selectedFavorite || recipe;
    if (!currentRecipe) return;
    const textToCopy = `${currentRecipe.title}\n\nIngredients:\n${currentRecipe.ingredients.join('\n')}\n\nSteps:\n${currentRecipe.steps.join('\n')}`;
    try {
      await Clipboard.setStringAsync(textToCopy);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Clipboard error:', error);
      setError('Clipboard failed');
    }
  };

  const clearInput = () => {
    setMeat('');
    setVegetable('');
    setFruit('');
    setSeafood('');
    setDairy('');
    setCarb('');
    setDevilWater('');
    setStyle('');
    setCategory('');
    setRecipe(null);
    setError(null);
    setLastRandom(false);
    setSelectedFavorite(null);
    setSearch('');
  };

  const fetchRandomRecipe = () => fetchRecipe(true);

  const toggleFavorites = () => {
    setShowFavorites(!showFavorites);
    setSelectedFavorite(null);
    setSearch('');
  };

  const handleAddAllToCart = () => {
    console.log('Add All to Amazon Cart clicked');
    setShowCartModal(true);
  };

  const AffiliateSection = () => (
    <View style={styles.affiliateSection}>
      <Text style={styles.affiliateHeader}>üí∞ Git Yer Loot Here, Y‚Äôall! üí∏</Text>
      {AFFILIATE_LINKS.map((link) => (
        <TouchableOpacity key={link.title} style={styles.affiliateButton} onPress={() => Linking.openURL(link.url)}>
          <Image
            source={{ uri: link.image }}
            style={styles.affiliateImage}
            onError={(e) => console.error(`Image failed: ${link.image}`, e.nativeEvent.error)}
            defaultSource={require('../assets/fallback.png')}
          />
          <Text style={styles.affiliateText}>{link.title}</Text>
        </TouchableOpacity>
      ))}
      <Text style={styles.affiliateDisclaimer}>As an Amazon Associate, I earn from qualifyin‚Äô purchases, yeehaw!</Text>
    </View>
  );

  const RecipeCard = ({ recipe, onShare, onSave, onBack }) => {
    console.log('Rendering RecipeCard:', recipe);
    return (
      <View style={styles.recipeCard}>
        <Text style={styles.recipeTitle}>{recipe.title || 'No Title'}</Text>
        <Text style={styles.recipeSection}>Ingredients:</Text>
        {(recipe.ingredients || []).map((ing, i) => (
          <Text key={i} style={styles.recipeItem}>- {ing}</Text>
        ))}
        <Text style={styles.recipeSection}>Steps:</Text>
        {(recipe.steps || []).map((step, i) => (
          <Text key={i} style={styles.recipeItem}>{i + 1}. {step}</Text>
        ))}
        <Text style={styles.recipeSection}>Nutrition:</Text>
        <Text style={styles.recipeItem}>
          Calories: {recipe.nutrition?.calories || 0} (Chaos: {recipe.nutrition?.chaos_factor || 0}/10)
        </Text>
        <Text style={styles.recipeSection}>Gear:</Text>
        <Text style={styles.recipeItem}>{(recipe.equipment || []).join(', ') || 'None'}</Text>
        <View style={styles.recipeActions}>
          <TouchableOpacity
            style={[styles.copyButton, { backgroundColor: copied ? '#4ECDC4' : '#FF69B4', borderColor: '#FFD700' }]}
            onPress={copyToClipboard}
          >
            <Text style={styles.copyButtonText}>{copied ? 'Snagged It! üéØ' : 'Copy to Clipboard üìã'}</Text>
          </TouchableOpacity>
          <Button title="üê¶ Share to X" onPress={() => onShare('twitter')} color="#1DA1F2" />
          <Button title="üìò Share to Facebook" onPress={() => onShare('facebook')} color="#4267B2" />
          <Button title="üì£ Share to Pals" onPress={() => onShare('default')} color="#FF6B6B" />
          <TouchableOpacity
            style={[styles.copyButton, { backgroundColor: '#FF9900', borderColor: '#FFD700', marginVertical: 5 }]}
            onPress={handleAddAllToCart}
          >
            <Text style={styles.copyButtonText}>üõí Add All to Amazon Cart</Text>
          </TouchableOpacity>
          {onSave && <Button title="üíæ Hoard This Gem" onPress={onSave} color="#4ECDC4" />}
          {onBack && <Button title="‚¨ÖÔ∏è Back to the Heap" onPress={onBack} color="#FFD93D" />}
        </View>
      </View>
    );
  };

  const PickerSection = ({ label, category, value, onValueChange, bgColor, borderColor }) => (
    <View style={styles.inputSection}>
      <Text style={[styles.inputLabel, { backgroundColor: bgColor, color: '#FFD700' }]}>{label}</Text>
      <Picker selectedValue={value} onValueChange={onValueChange} style={[styles.picker, { backgroundColor: bgColor, borderColor }]}>
        <Picker.Item label="None" value="" color="#FFF" />
        {INGREDIENT_CATEGORIES[category].map((item) => (
          <Picker.Item key={item.name} label={`${item.name} ${item.emoji}`} value={item.name} color="#FFF" />
        ))}
      </Picker>
    </View>
  );

  console.log('Rendering HomeScreen, recipe:', recipe);

  return (
    <ErrorBoundary>
      <ScrollView style={styles.scrollContainer} contentContainerStyle={styles.scrollContent}>
        <AnimatedView entering={Platform.OS !== 'web' ? FadeIn.duration(800).easing(Easing.out(Easing.exp)) : undefined} style={styles.container}>
          <Text style={styles.header}>ü§™ Chuckle & Chow: Recipe Rumble üçîüí•</Text>
          <Text style={styles.subheader}>Cookin‚Äô Up Chaos for Rednecks, Rebels, and Rascals! üé∏üî•</Text>
          <View style={styles.trustSection}>
            <Text style={styles.trustText}>üå∂Ô∏è Hotter than a jalape√±o‚Äôs armpit</Text>
            <Text style={styles.trustText}>üç∫ Best with a cold one, yeehaw!</Text>
            <Text style={styles.trustText}>üê∑ Crazier than a hog on a hot tin roof</Text>
          </View>
          <PickerSection label="ü•© Meaty Madness üçñ" category="meat" value={meat} onValueChange={setMeat} bgColor="#FF6347" borderColor="#FFD700" />
          <PickerSection
            label="ü•ï Veggie Voodoo ü•î"
            category="vegetables"
            value={vegetable}
            onValueChange={setVegetable}
            bgColor="#228B22"
            borderColor="#ADFF2F"
          />
          <PickerSection
            label="üçé Fruity Frenzy üçã"
            category="fruits"
            value={fruit}
            onValueChange={setFruit}
            bgColor="#FF1493"
            borderColor="#FFB6C1"
          />
          <PickerSection
            label="ü¶ê Sea Critter Chaos üêü"
            category="seafood"
            value={seafood}
            onValueChange={setSeafood}
            bgColor="#20B2AA"
            borderColor="#00FFFF"
          />
          <PickerSection label="üßÄ Dairy Delirium üßÄ" category="dairy" value={dairy} onValueChange={setDairy} bgColor="#FFA500" borderColor="#FFD700" />
          <PickerSection label="üçû Carb Craze üçù" category="carbs" value={carb} onValueChange={setCarb} bgColor="#8B4513" borderColor="#FFD700" />
          <PickerSection
            label="ü•É Devil Water Disaster üç∫"
            category="devilWater"
            value={devilWater}
            onValueChange={setDevilWater}
            bgColor="#800080"
            borderColor="#FFD700"
          />
          {isLoading && (
            <View style={styles.spinnerContainer}>
              <ActivityIndicator size="large" color="#FF6B6B" />
              <Text style={[styles.spinnerText, { color: '#FF1493', fontWeight: 'bold' }]}>
                üî• Whippin‚Äô up somethin‚Äô nuttier than squirrel turds... üêøÔ∏è
              </Text>
              <View style={styles.recipeCard}>
                <View style={[styles.skeletonBox, { height: 30, width: '80%', marginBottom: 10 }]} />
                <View style={[styles.skeletonBox, { height: 20, width: '60%', marginBottom: 5 }]} />
                <View style={[styles.skeletonBox, { height: 20, width: '70%', marginBottom: 5 }]} />
                <View style={[styles.skeletonBox, { height: 20, width: '50%', marginBottom: 5 }]} />
              </View>
            </View>
          )}
          {error && (
            <AnimatedView entering={Platform.OS !== 'web' ? FadeIn.duration(800) : undefined} style={styles.errorContainer}>
              <Text style={[styles.error, { color: '#FF1493', fontSize: 20 }]}>üí• Dang it! {error} ü§¶‚Äç‚ôÇÔ∏è</Text>
              <Button title="üßπ Clear the Mess" onPress={() => setError(null)} color="#4ECDC4" />
              <Button title="üê¥ Retry, Ya Mule!" onPress={() => fetchRecipe(lastRandom)} color="#FF3D00" />
            </AnimatedView>
          )}
          <AnimatedView entering={Platform.OS !== 'web' ? FadeInUp.delay(600).duration(600) : undefined} style={styles.buttonRow}>
            <Button title="üç≥ Cook Me a Hoot! üéâ" onPress={() => fetchRecipe(false)} disabled={isLoading} color="#FF4500" />
            <Button title="üé≤ Random Ruckus Recipe üå©Ô∏è" onPress={fetchRandomRecipe} disabled={isLoading} color="#FF00A0" />
            <Button title="üßπ Wipe the Slate, Bubba üê¥" onPress={clearInput} color="#4ECDC4" />
            <Button title={showFavorites ? 'üôà Hide My Stash' : 'üí∞ Show My Stash'} onPress={toggleFavorites} color="#4ECDC4" />
          </AnimatedView>
          {recipe && recipe.title !== 'Error' && !selectedFavorite && (
            <RecipeCard recipe={recipe} onShare={shareRecipe} onSave={saveFavorite} />
          )}
          {recipe && recipe.title === 'Error' && (
            <AnimatedView entering={Platform.OS !== 'web' ? FadeIn.duration(800) : undefined} style={styles.errorContainer}>
              <Text style={[styles.error, { color: '#FF1493', fontSize: 20 }]}>üí• Dang it! {recipe.steps[0]} ü§¶‚Äç‚ôÇÔ∏è</Text>
              <Button title="üê¥ Retry, Ya Mule!" onPress={() => fetchRecipe(lastRandom)} color="#FF3D00" />
              <Button title="üßπ Clear the Mess" onPress={() => setRecipe(null)} color="#4ECDC4" />
            </AnimatedView>
          )}
          {showFavorites && favorites.length > 0 && (
            <FavoritesList
              favorites={favorites}
              setFavorites={setFavorites}
              search={search}
              setSearch={setSearch}
              setSelectedFavorite={setSelectedFavorite}
            />
          )}
          {selectedFavorite && (
            <RecipeCard recipe={selectedFavorite} onShare={shareRecipe} onBack={() => setSelectedFavorite(null)} />
          )}
          <WebModal
            visible={showCartModal}
            transparent={true}
            animationType="fade"
            onRequestClose={() => setShowCartModal(false)}
          >
            <View style={styles.modalOverlay}>
              <View style={styles.modalContent}>
                <Image
                  source={require('../assets/fallback.png')}
                  style={styles.modalImage}
                />
                <Text style={styles.modalText}>Coming Soon</Text>
                <Text style={styles.modalSubText}>This feature is cookin‚Äô and ain‚Äôt ready yet!</Text>
                <TouchableOpacity
                  style={styles.modalButton}
                  onPress={() => setShowCartModal(false)}
                >
                  <Text style={styles.modalButtonText}>OK</Text>
                </TouchableOpacity>
              </View>
            </View>
          </WebModal>
          <AffiliateSection />
          <View style={styles.footer}>
            <Image
              source={require('../assets/gt.png')}
              style={styles.footerLogo}
            />
            <Text style={styles.footerCopyright}>¬© 2025 Chuckle & Chow üåü</Text>
            <View style={styles.footerLinks}>
              <Link href="/privacy-policy" style={styles.footerPrivacyLink}>
                <Text style={styles.footerPrivacyText}>Privacy Policy üïµÔ∏è‚Äç‚ôÇÔ∏è</Text>
              </Link>
              <Text style={styles.footerContactText}>
                Got issues? Holler at{' '}
                <Text
                  style={styles.footerEmailLink}
                  onPress={() => Linking.openURL('mailto:bshoemak@mac.com')}
                >
                  bshoemak@mac.com üìß
                </Text>
              </Text>
            </View>
            <Image
              source={require('../assets/fallback.png')}
              style={styles.footerFallback}
            />
          </View>
        </AnimatedView>
      </ScrollView>
    </ErrorBoundary>
  );
}